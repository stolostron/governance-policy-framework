language: go

go:
  - "1.14.x"

services:
  - docker

branches:
  only:
    - master
    - /^release-[0-9]+\..*$/

env:
  global:
    - OS=linux
    - COMPONENT_TAG_EXTENSION="-${TRAVIS_COMMIT}"
    # Component Specific
    - COMPONENT_INIT_COMMAND=${TRAVIS_BUILD_DIR}/build/install-dependencies.sh
    - COMPONENT_E2E_TEST_COMMAND=${TRAVIS_BUILD_DIR}/build/run-e2e-tests.sh

stages:
  - prepare
  - test-e2e
  - ff
  - publish

before_script:
  - make init

jobs:
  include:
    - stage: prepare
      name: "Build the test image"
      if: type = push AND branch = master
      script:
        - set -e
        - if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then export COMPONENT_TAG_EXTENSION="-PR${TRAVIS_PULL_REQUEST}-${TRAVIS_COMMIT}"; fi;
        - export COMPONENT_BUILD_COMMAND="docker build . -f Dockerfile.e2etest -t "
        - export COMPONENT_NAME="grc-policy-framework-tests"
        - go mod vendor
        - make component/build
        - make component/push
        - COMPONENT_NEWTAG="latest-dev" make component/tag;
        - COMPONENT_VERSION="latest" COMPONENT_TAG_EXTENSION="-dev" make component/push;
    - stage: prepare
      name: "Patch cluster to latest"
      if: type != pull_request AND branch = master
      env:
        - COMPONENT_E2E_TEST_COMMAND=${TRAVIS_BUILD_DIR}/build/patch-cluster.sh
      script: 
        - |
          make
          make component/test/e2e
    - stage: test-e2e
      name: "Governance framework UI e2e tests"
      if: type != pull_request AND branch = master
      env:
        - COMPONENT_E2E_TEST_COMMAND=${TRAVIS_BUILD_DIR}/build/run-e2e-tests-ui.sh
      script: 
        - |
          make
          make component/test/e2e
      after_failure:
        - make travis-slack-reporter
    - stage: test-e2e
      name: "Governance framework e2e tests"
      script:
        - |
          make
          make component/test/e2e
    - stage: test-e2e
      name: "Governance framework e2e tests with deployOnHub=true"
      env:
        - deployOnHub=true
      script:
        - |
          make
          make component/test/e2e
    - stage: test-e2e
      name: "Test polices from policy-collection repo"
      if: type != pull_request AND branch = master
      env:
        - COMPONENT_E2E_TEST_COMMAND=${TRAVIS_BUILD_DIR}/build/run-e2e-tests-policy-framework.sh
      script: 
        - |
          make
          export COMPONENT_NAME="grc-policy-framework-tests"
          if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then export COMPONENT_TAG_EXTENSION="-PR${TRAVIS_PULL_REQUEST}-${TRAVIS_COMMIT}"; fi;
          make component/pull
          make component/test/e2e
    - stage: ff
      name: "Fast forwarding GRC repos"
      if: type != pull_request AND branch = master
      scripts: ./build/ff.sh
    - stage: publish
      name: "Publish the image to quay with an official version/sha tag and publish entry to integration pipeline stage"
      if: type = push AND branch =~ /^release-[0-9]+\..*$/
      script:
        - set -e
        - make pipeline-manifest/update COMPONENT_NAME=grc-policy-framework-tests PIPELINE_MANIFEST_COMPONENT_SHA256=${TRAVIS_COMMIT} PIPELINE_MANIFEST_COMPONENT_REPO=${TRAVIS_REPO_SLUG} PIPELINE_MANIFEST_BRANCH=${TRAVIS_BRANCH}
  
notifications:
  slack:
    if: branch = master
    on_pull_requests: false
    rooms:
      secure: qaj5g0eO0XtIXz9vhwIkeH8RTtOFVMjZabgDAEk/YqUtBRrOTVADp4haRigNYBwhnew/h5gA4i+8j/rBZGbNn0W4ziPJT5WDAbqlyg6v7A/xguJozKL4LIuW29NaJaNisW1OtDCrXxJ0Pb5HjaIhoQMxl5UWKP7BJv0Xy9lq4tqfO+CJDuyerP0M6pFgnK8qYpbQ5NDh4Ou7HMLxYrJdfXf7T7YYi3pE7EctYIz05DTEYqYsh8rfOuvunmL3uBYuMROOnygJmKfApBn59rgQWtvLcoQUl6l5p1C9bR5F9yn5gFPAqKWbRPBNwStxHf+gCdCoac+iOQfwGnODlO+x+KItWYIuPSlMHdl+BrFLJ/GqraIAvArGQqkZ6zIHcIlmIHNUak+h6LZUdWSuvgQI666dZwZOBDEFqn9yWGOgO2nFYCoB8VDwHXA2zaEe1ZuWGrX+pVe0WgM7C4EYK21i6HlN9N20/gqIjyGW5CQZJWFrl55OF5uR4ZfPvclr1GwsxiQfVfGyUAU5TGgQvY+QcU8sxhL8g7OZxEbFdV06+HzUAKyVIv0N4rwlCQdr46DDR6y8nOIOYfBD3a0w5poMab6m7qLd+w1E041gFDnEqnxSE8qlFPxREwPOsPhL4EuqtKUP7NTVrXY4/6jtM1D+Dz3MMEtIEq1Kj/YE/XTxlLQ=
    template:
      - GRC integration e2e test %{result} in %{duration}
      # - "%{repository_slug} (%{commit}) : %{message}"
      - "Build details: %{build_url}"
    on_success: always
    on_failure: always
    
